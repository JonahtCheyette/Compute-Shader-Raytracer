// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> result;
float4x4 cameraToWorld;
float4x4 cameraInverseProjection;

Texture2D<float4> SkyboxTexture;

//must be named sampler + whatever the name of the texture is
SamplerState samplerSkyboxTexture;
static const float PI = 3.14159265f;

//the offset for the pixel
float2 pixelOffset;

//the light to use
float4 directionalLight;

//the maximum number of reflections
int maxNumReflections = 8;

//whether to use hard shadows
bool useDiffuseLighting = false;

float2 pixel;
float seed;

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 specular;
    float3 albedo;
    float smoothness;
    float3 emission;
};

struct Sphere {
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

//the spheres
StructuredBuffer<Sphere> spheres;

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

float rand() {
    float result = frac(sin(seed / 100.0f * dot(pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    seed += 1.0f;
    return result;
}

float sdot(float3 x, float3 y, float f = 1.0f) {
    return saturate(dot(x, y) * f);
}

float3x3 GetTangentSpace(float3 normal) {
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha) {
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    //gets the x-y-z coordinates of the camera in world space
    float3 origin = mul(cameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    //gets rid of the projection that the camera does.
    float3 direction = mul(cameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    //takes a direction shooting out from the camera and transforms it into a direction in world space
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF; //1.#INF = infinity
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    //the reflectivity of the surface
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.5f, 0.5f, 0.5f);
        bestHit.specular = float3(0.05f, 0.05f, 0.05f);
        bestHit.smoothness = 0.2f;
        bestHit.emission = float3(0.0f, 0.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
    }
}

//find the closest intersection along a ray
RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    // Trace spheres
    uint numSpheres, stride;
    spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++) {
        IntersectSphere(ray, bestHit, spheres[i]);
    }
    IntersectGroundPlane(ray, bestHit);
    return bestHit;
}

float energy(float3 color) {
    return dot(color, 1.0f / 3.0f);
}

float SmoothnessToPhongAlpha(float s) {
    return pow(1000.0f, s * s);
}

//shade a rayhit the correct color
float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 1.#INF) {
        ray.origin = hit.position + hit.normal * 0.001f;
        // Calculate chances of diffuse and specular reflection
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;
        // Roulette-select the ray's path
        float roulette = rand();
        if (roulette < specChance) {
            // Specular reflection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        } else {
            // Diffuse reflection
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        return hit.emission;
    } else {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return SkyboxTexture.SampleLevel(samplerSkyboxTexture, float2(phi, theta), 0).xyz * 0.3f;
    }
}

[numthreads(8,4,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    pixel = id.xy;

    // Get the dimensions of the RenderTexture
    uint width, height;
    result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + pixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Trace and shade
    float3 col = float3(0, 0, 0);
    for (int i = 0; i < maxNumReflections; i++) {
        RayHit hit = Trace(ray);
        col += ray.energy * Shade(ray, hit);
        if (!any(ray.energy)) {
            break;
        }
    }
    result[id.xy] = float4(col, 1);
}
